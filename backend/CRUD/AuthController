package Razzvozz;
import io.jsonwebtoken.security.Keys;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.Random;
import java.sql.SQLException;
import java.util.Date;
import java.util.Map;

import javax.crypto.SecretKey;

@RestController
@RequestMapping("/api/auth")
public class AuthController {

	private final SecretKey SECRET_KEY = Keys.secretKeyFor(SignatureAlgorithm.HS256); // Замените на безопасный ключ

    @Autowired
    private UserService userService;

    @Operation(summary = "Авторизация пользователя и генерация JWT токена")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "JWT токен успешно сгенерирован"),
            @ApiResponse(responseCode = "401", description = "Неверные учетные данные")
    })
    @PostMapping("/login")
    public ResponseEntity<Map<String, String>> login(@RequestBody Map<String, String> loginData) {
        String login = loginData.get("login");
        String password = loginData.get("password");

      
        User user = userService.findByLoginAndPassword(login, password);
        if (user == null) {
            return ResponseEntity.status(401).body(Map.of("error", "Invalid credentials"));
        }

     
        String token = Jwts.builder()
                .setSubject(user.getLogin())
                .claim("admin", user.isAdmin())
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + 86400000)) 
                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)
                .compact();

        return ResponseEntity.ok(Map.of("token", token));
    }
    private final Random random = new Random();
    
    @PostMapping("/register")
    public ResponseEntity<String> register(@RequestBody RegistrationRequest registrationData) throws SQLException {
        String login = registrationData.getLogin();
        String password = registrationData.getPassword();
        String email = registrationData.getEmail();
        String telephone = registrationData.getTelephone();

        
        if (isNullOrEmpty(login) || isNullOrEmpty(password) || isNullOrEmpty(email)) {
            return ResponseEntity.badRequest().body("Все обязательные поля должны быть заполнены.");
        }

     
        try {
			if (userService.getUserByLogin(login) != null) {
			    return ResponseEntity.badRequest().body("Пользователь с таким логином уже существует.");
			}
		} catch (SQLException e) {
		
			e.printStackTrace();
		}

     
        try {
			if (userService.isEmailRegistered(email) == true) {
			    return ResponseEntity.badRequest().body("Пользователь с таким email уже существует.");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
       
        int userId = generateUniqueId();

        
        User newUser = new User();
        newUser.setUserId(userId);
        newUser.setLogin(login);
        newUser.setPassword(password); 
        newUser.setEmail(email);
        newUser.setTelephone(telephone);
        newUser.setAdmin(false); 

      
        try {
			userService.createUser(newUser);
		} catch (SQLException e) {
			e.printStackTrace();
		}

        return ResponseEntity.ok("Пользователь успешно зарегистрирован!");
    }
    
    private int generateUniqueId() throws SQLException {
        int userId;
        do {
            userId = random.nextInt(1000) + 1;
        } while (userService.getUserById(userId) != null); 
        return userId;
    }
    
    private boolean isNullOrEmpty(String value) {
        return value == null || value.trim().isEmpty();
    }

}
