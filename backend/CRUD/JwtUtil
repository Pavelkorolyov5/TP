package Razzvozz;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.Claims;
import org.springframework.stereotype.Component;
import java.util.Base64;

import java.util.Date;

@Component
public class JwtUtil {
	String plainSecretKey = "this_is_my_very_secure_and_long_key123456";
	String base64EncodedKey = Base64.getEncoder().encodeToString(plainSecretKey.getBytes());
    private final String SECRET_KEY = Base64.getEncoder().encodeToString("this_is_your_very_secure_and_long_key123456".getBytes()); // Замените на более сложный ключ

    // Генерация токена
    public String generateToken(String username) {
        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 10)) // 10 часов
                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)
                .compact();
    }

    // Извлечение информации о пользователе из токена
    public String extractUsername(String token) {
        return extractClaims(token).getSubject();
    }

    // Проверка срока действия токена
    public boolean isTokenExpired(String token) {
        return extractClaims(token).getExpiration().before(new Date());
    }

    // Валидация токена
    public boolean validateToken(String token, String username) {
        return (extractUsername(token).equals(username) && !isTokenExpired(token));
    }

    // Извлечение всех Claims из токена
    private Claims extractClaims(String token) {
        return Jwts.parser()
                .setSigningKey(SECRET_KEY)
                .parseClaimsJws(token)
                .getBody();
    }
}
