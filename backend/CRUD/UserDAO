package Razzvozz;

import org.springframework.stereotype.Repository;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

@Repository
public class UserDAO {

    
    public void insertUser(int userId, String login, String password, boolean isAdmin, String email, String telephone) throws SQLException {
        String query = "INSERT INTO Users (User_ID, Login, Password, Admin, Email, Telephone) VALUES (?, ?, ?, ?, ?, ?)";
        try (Connection connection = SSMSConnect.getConnection();
             PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setInt(1, userId);
            statement.setString(2, login);
            statement.setString(3, password);
            statement.setBoolean(4, isAdmin);
            statement.setString(5, email);
            statement.setString(6, telephone);
            statement.executeUpdate();
        }
    }

   
    public List<User> getAllUsers() throws SQLException {
        List<User> users = new ArrayList<>();
        String query = "SELECT User_ID, Login, Password, Admin, Email, Telephone FROM Users";
        try (Connection connection = SSMSConnect.getConnection();
             PreparedStatement statement = connection.prepareStatement(query);
             ResultSet resultSet = statement.executeQuery()) {
            while (resultSet.next()) {
                users.add(new User(
                        resultSet.getInt("User_ID"),
                        resultSet.getString("Login"),
                        resultSet.getString("Password"),
                        resultSet.getBoolean("Admin"),
                        resultSet.getString("Email"),
                        resultSet.getString("Telephone")
                ));
            }
        }
        return users;
    }

   
    public User getUserById(int userId) throws SQLException {
        String query = "SELECT User_ID, Login, Password, Admin, Email, Telephone FROM Users WHERE User_ID = ?";
        try (Connection connection = SSMSConnect.getConnection();
             PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setInt(1, userId);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    return new User(
                            userId,
                            resultSet.getString("Login"),
                            resultSet.getString("Password"),
                            resultSet.getBoolean("Admin"),
                            resultSet.getString("Email"),
                            resultSet.getString("Telephone")
                    );
                }
            }
        }
        return null; // Return null if the user is not found
    }

    
    public User getUserByLoginAndPassword(String login, String password) throws SQLException {
        String query = "SELECT User_ID, Login, Password, Admin, Email, Telephone FROM Users WHERE Login = ? AND Password = ?";
        try (Connection connection = SSMSConnect.getConnection();
             PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, login);
            statement.setString(2, password);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    return new User(
                            resultSet.getInt("User_ID"),
                            resultSet.getString("Login"),
                            resultSet.getString("Password"),
                            resultSet.getBoolean("Admin"),
                            resultSet.getString("Email"),
                            resultSet.getString("Telephone")
                    );
                }
            }
        }
        return null;
    }

    
    public User getUserByLogin(String login) throws SQLException {
        String query = "SELECT User_ID, Login, Password, Admin, Email, Telephone FROM Users WHERE Login = ?";
        try (Connection connection = SSMSConnect.getConnection();
             PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, login);
            try (ResultSet resultSet = statement.executeQuery()) {
                if (resultSet.next()) {
                    return new User(
                            resultSet.getInt("User_ID"),
                            resultSet.getString("Login"),
                            resultSet.getString("Password"),
                            resultSet.getBoolean("Admin"),
                            resultSet.getString("Email"),
                            resultSet.getString("Telephone")
                    );
                }
            }
        }
        return null;
    }

   
    public void updateUser(int userId, String login, String password, boolean isAdmin, String email, String telephone) throws SQLException {
        String query = "UPDATE Users SET Login = ?, Password = ?, Admin = ?, Email = ?, Telephone = ? WHERE User_ID = ?";
        try (Connection connection = SSMSConnect.getConnection();
             PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, login);
            statement.setString(2, password);
            statement.setBoolean(3, isAdmin);
            statement.setString(4, email);
            statement.setString(5, telephone);
            statement.setInt(6, userId);
            statement.executeUpdate();
        }
    }

    
    public void deleteUser(int userId) throws SQLException {
        String query = "DELETE FROM Users WHERE User_ID = ?";
        try (Connection connection = SSMSConnect.getConnection();
             PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setInt(1, userId);
            statement.executeUpdate();
        }
    }

    
    public boolean isEmailRegistered(String email) throws SQLException {
        String query = "SELECT 1 FROM Users WHERE Email = ?";
        try (Connection connection = SSMSConnect.getConnection();
             PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, email);
            try (ResultSet resultSet = statement.executeQuery()) {
                return resultSet.next(); // If any result is found, the email is registered
            }
        }
    }
}
