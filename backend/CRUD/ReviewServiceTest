package test;

import Razzvozz.ReviewDAO;
import Razzvozz.ReviewService;
import Razzvozz.Review;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ReviewServiceTest {

    @Mock
    private ReviewDAO reviewDAO;

    @InjectMocks
    private ReviewService reviewService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testAddReview() {
        int reviewId = 1;
        int userId = 123;
        int rate = 5;
        String text = "Great product!";

        assertDoesNotThrow(() -> reviewService.addReview(reviewId, userId, rate, text));
        verify(reviewDAO, times(1)).insertReview(reviewId, userId, rate, text);
    }

    @Test
    void testFindReviewById() throws SQLException {
        int reviewId = 1;
        Review expectedReview = new Review(reviewId, 123, 5, "Great product!");

        when(reviewDAO.getReviewById(reviewId)).thenReturn(expectedReview);

        Review actualReview = reviewService.findReviewById(reviewId);
        assertEquals(expectedReview, actualReview);
        verify(reviewDAO, times(1)).getReviewById(reviewId);
    }

    @Test
    void testFindReviewByIdNotFound() throws SQLException {
        int reviewId = 2;

        when(reviewDAO.getReviewById(reviewId)).thenReturn(null);

        Review actualReview = reviewService.findReviewById(reviewId);
        assertNull(actualReview);
        verify(reviewDAO, times(1)).getReviewById(reviewId);
    }

    @Test
    void testFindAllReviews() throws SQLException {
        List<Review> expectedReviews = new ArrayList<>();
        expectedReviews.add(new Review(1, 123, 5, "Great product!"));
        expectedReviews.add(new Review(2, 124, 4, "Good value!"));

        when(reviewDAO.getAllReviews()).thenReturn(expectedReviews);

        List<Review> actualReviews = reviewService.findAllReviews();
        assertEquals(expectedReviews, actualReviews);
        verify(reviewDAO, times(1)).getAllReviews();
    }

    @Test
    void testModifyReview() throws SQLException {
        int reviewId = 1;
        String text = "Updated review";
        int userId = 123;
        int rate = 4;

        assertDoesNotThrow(() -> reviewService.modifyReview(reviewId, text, userId, rate));
        verify(reviewDAO, times(1)).updateReview(reviewId, text, userId, rate);
    }

    @Test
    void testRemoveReview() throws SQLException {
        int reviewId = 1;

        assertDoesNotThrow(() -> reviewService.removeReview(reviewId));
        verify(reviewDAO, times(1)).deleteReview(reviewId);
    }
}
